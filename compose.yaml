services:
  # сервис постгреса
  # подключён в единую сетку
  # порты "наружу" не светим
  postgres:
    image: postgres:latest
    container_name: postgres_container
    environment:
      POSTGRES_USER: postgres_user
      POSTGRES_PASSWORD: postgres_password
      POSTGRES_DB: postgres_db
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - ~/pgdata_local:/var/lib/postgresql/data/pgdata
    command: >
      postgres -c max_connections=1000
               -c shared_buffers=256MB
               -c effective_cache_size=768MB
               -c maintenance_work_mem=64MB
               -c checkpoint_completion_target=0.7
               -c wal_buffers=16MB
               -c default_statistics_target=100
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres_user -d postgres_db" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    tty: true
    stdin_open: true
    networks:
      - dockerized_network
    hostname: postgres

  # билдим с помощью докерфайла, порты наружу - не светим
  # подключаем в единую сетку
  backend:
    build:
      dockerfile: ./python_backend/Dockerfile
    networks:
      - dockerized_network
    hostname: backend


  # билдим с помощью докерфайла, порты наружу - не светим
  # подключаем в единую сетку
  frontend:
    build:
      dockerfile: ./python_frontend/Dockerfile
    networks:
      - dockerized_network
    hostname: frontend

  # reverse proxy в виде ngnix
  # только он виден внешнему миру через 80ый порт (который собственным конфигом вообще в ноль превращается)
  # также подключен к сетке контейнеров чтобы увидеть фронт и бэк
  proxy:
    image: nginx:latest
    ports:
      - "80:80" # map internal port 80 to external port 80
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf # use custom nginx config
    networks:
      - dockerized_network
    hostname: proxy

# подключение волюмы для внешнего хранения данных постгресса
volumes:
  pgdata:
    driver: local

# декларация сетки, в которой будут работать контейнеры
networks:
  dockerized_network:

